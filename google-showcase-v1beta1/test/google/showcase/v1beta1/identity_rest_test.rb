# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"
require "google/showcase/v1beta1/identity"
require 'faraday'
require 'json'

class ::Google::Showcase::V1beta1::Identity::ClientRestTest < Minitest::Test
  class CountingClientStubMock
    attr_accessor :call_count, :requests

    def initialize result, env, &block
      @result = result
      @env = env
      @block = block

      @call_count = 0
      @requests = []
    end

    def make_post_request *args, **kwargs
      @call_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @result, @env if block_given?

      @result
    end
  end

  def test_create_user
    # Create request parameters for a unary method.
    user = {}
    rest_options = {}

    call_result = {
      status: 200,
      body: "{}",
    }
    call_env = Struct.new(:request_body).new("{\"user\":{}}")

    create_client_stub_mock = CountingClientStubMock.new call_result, call_env do |endpoint:, request:, options:|
      assert_equal "v1beta1/users", endpoint
      assert_equal({}, JSON.parse(request)['user'])
      refute_nil options
    end

    Gapic::Rest::ClientStub.stub :new, create_client_stub_mock do
      # Create client
      client = ::Google::Showcase::V1beta1::Identity::ClientRest.new

      # Use hash object
      client.create_user({ user: user }) do |result, env|
        assert_equal 200, result[:status]

        result_user = JSON.parse(result[:body])
        assert_equal user, result_user

        request_user = JSON.parse(env.request_body)['user']
        assert_equal user, request_user
      end

      # Use named arguments
      client.create_user user: user do |result, env|
        assert_equal 200, result[:status]

        result_user = JSON.parse(result[:body])
        assert_equal user, result_user

        request_user = JSON.parse(env.request_body)['user']
        assert_equal user, request_user
      end

      # Use protobuf object
      client.create_user ::Google::Showcase::V1beta1::CreateUserRequest.new(user: user) do |result, env|
        assert_equal 200, result[:status]

        result_user = JSON.parse(result[:body])
        assert_equal user, result_user

        request_user = JSON.parse(env.request_body)['user']
        assert_equal user, request_user
      end

      # Use hash object with options
      client.create_user({ user: user }, rest_options) do |result, env|
        assert_equal 200, result[:status]

        result_user = JSON.parse(result[:body])
        assert_equal user, result_user

        request_user = JSON.parse(env.request_body)['user']
        assert_equal user, request_user
      end

      # Use protobuf object with options
      client.create_user ::Google::Showcase::V1beta1::CreateUserRequest.new(user: user), rest_options do |result, env|
        assert_equal 200, result[:status]

        result_user = JSON.parse(result[:body])
        assert_equal user, result_user

        request_user = JSON.parse(env.request_body)['user']
        assert_equal user, request_user
      end

      # Verify method calls
      assert_equal 5, create_user_call_maker_mock.call_count
    end
  end

  # @param id [Int, String]
  # @return [Hash {String => String}]
  def create_user_hash(id)
    {
      'display_name' => "ExampleName#{id}",
      'email' => "ExampleName#{id}@example.com"
    }
  end

  def test_create_user_real
    rest_options = {}
    client = ::Google::Showcase::V1beta1::Identity::ClientRest.new

    user = create_user_hash 0
    # Use hash object
    client.create_user({ user: user }) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
   end

    user = create_user_hash 1
    # Use named arguments
    client.create_user user: user do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_user_hash 2
    # Use protobuf object
    client.create_user ::Google::Showcase::V1beta1::CreateUserRequest.new(user: user) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_user_hash 3
    # Use hash object with options
    client.create_user({ user: user }, rest_options) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_user_hash 4
    # Use protobuf object with options
    #noinspection RubyYardParamTypeMatch
    client.create_user ::Google::Showcase::V1beta1::CreateUserRequest.new(user: user), rest_options do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end
  end

  # @param id [Int, String]
  # @return [String]
  def create_username id
    "users/#{id}"
  end

  def test_get_user_real
    rest_options = {}
    client = ::Google::Showcase::V1beta1::Identity::ClientRest.new

    name = create_username 0
    user = create_user_hash 0
    # Use hash object
    client.get_user({ name: name }) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 1
    user = create_user_hash 1
    # Use named arguments
    client.get_user name: name do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 2
    user = create_user_hash 2
    # Use protobuf object
    client.get_user ::Google::Showcase::V1beta1::GetUserRequest.new(name: name) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 3
    user = create_user_hash 3
    # Use hash object with options
    client.get_user({ name: name }, rest_options) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 4
    user = create_user_hash 4
    # Use protobuf object with options
    client.get_user ::Google::Showcase::V1beta1::GetUserRequest.new(name: name), rest_options do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end
  end

  # @param id [Int, String]
  # @return [Hash {String => String}]
  def create_update_user_hash id
    user = create_user_hash "1"+id.to_s
    user['name'] = create_username id
    user
  end

  def test_update_user_real
    rest_options = {}
    client = ::Google::Showcase::V1beta1::Identity::ClientRest.new

    update_mask = {
      paths: ["display_name"]
    }

    user = create_update_user_hash 0
    # Use hash object
    client.update_user({ user: user, update_mask: update_mask }) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_update_user_hash 1
    # Use named arguments
    client.update_user user: user, update_mask: update_mask do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_update_user_hash 2
    # Use protobuf object
    client.update_user ::Google::Showcase::V1beta1::UpdateUserRequest.new(user: user, update_mask: update_mask) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_update_user_hash 3
    # Use hash object with options
    client.update_user({ user: user, update_mask: update_mask }, rest_options) do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end

    user = create_update_user_hash 4
    # Use protobuf object with options
    #noinspection RubyYardParamTypeMatch
    client.update_user ::Google::Showcase::V1beta1::UpdateUserRequest.new(user: user, update_mask: update_mask), rest_options do |result, env|
      assert_equal 200, result[:status]

      result_user = JSON.parse(result[:body])
      assert_equal user['display_name'], result_user['displayName']

      request_user = JSON.parse(env.request_body)['user']
      assert_equal user['display_name'], request_user['displayName']
    end
  end

  def test_delete_user_real
    rest_options = {}
    client = ::Google::Showcase::V1beta1::Identity::ClientRest.new

    name = create_username 0
    # Use hash object
    client.delete_user({ name: name }) do |result, env|
      assert_equal 200, result[:status]

      # result_user = JSON.parse(result[:body])
      # assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 1
    # Use named arguments
    client.delete_user name: name do |result, env|
      assert_equal 200, result[:status]

      # result_user = JSON.parse(result[:body])
      # assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 2
    # Use protobuf object
    client.delete_user ::Google::Showcase::V1beta1::DeleteUserRequest.new(name: name) do |result, env|
      assert_equal 200, result[:status]

      # result_user = JSON.parse(result[:body])
      # assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 3
    # Use hash object with options
    client.delete_user({ name: name }, rest_options) do |result, env|
      assert_equal 200, result[:status]

      # result_user = JSON.parse(result[:body])
      # assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end

    name = create_username 4
    # Use protobuf object with options
    client.delete_user ::Google::Showcase::V1beta1::DeleteUserRequest.new(name: name), rest_options do |result, env|
      assert_equal 200, result[:status]

      # result_user = JSON.parse(result[:body])
      # assert_equal user['display_name'], result_user['displayName']

      # request_user = JSON.parse(env.request_body)['user']
      # assert_equal user['display_name'], request_user['displayName']
    end
  end
end
